package org.energy_home.jemma.ah.cluster.zigbee.closures;

import org.energy_home.jemma.ah.hac.ApplianceException;
import org.energy_home.jemma.ah.hac.IEndPointRequestContext;
import org.energy_home.jemma.ah.hac.ServiceClusterException;

/**
 * This file is part of JEMMA - http://jemma.energy-home.org (C) Copyright 2014
 * Telecom Italia (http://www.telecomitalia.it)
 * 
 * JEMMA is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License (LGPL) version 3 or later as
 * published by the Free Software Foundation, which accompanies this
 * distribution and is available at http://www.gnu.org/licenses/lgpl.html
 * 
 * JEMMA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License (LGPL) for
 * more details.
 * 
 * This interface has been generated by the Jemma ZigBee Cluster Library
 * generator, version 2.0.13-SNAPSHOT
 * 
 */
public interface DoorLockServer {

	final static String ATTR_LockState_NAME = "LockState";
	final static String ATTR_LockType_NAME = "LockType";
	final static String ATTR_ActuatorEnabled_NAME = "ActuatorEnabled";
	final static String ATTR_DoorState_NAME = "DoorState";
	final static String ATTR_DoorOpenEvents_NAME = "DoorOpenEvents";
	final static String ATTR_DoorClosedEvents_NAME = "DoorClosedEvents";
	final static String ATTR_OpenPeriod_NAME = "OpenPeriod";
	final static String ATTR_NumberofLogRecordsSupported_NAME = "NumberofLogRecordsSupported";
	final static String ATTR_NumberofTotalUsersSupported_NAME = "NumberofTotalUsersSupported";
	final static String ATTR_NumberofPINUsersSupported_NAME = "NumberofPINUsersSupported";
	final static String ATTR_NumberofRFIDUsersSupported_NAME = "NumberofRFIDUsersSupported";
	final static String ATTR_NumberofWeekDaySchedulesSupportedPerUser_NAME = "NumberofWeekDaySchedulesSupportedPerUser";
	final static String ATTR_NumberofYearDaySchedulesSupportedPerUser_NAME = "NumberofYearDaySchedulesSupportedPerUser";
	final static String ATTR_NumberofHolidaySchedulesSupported_NAME = "NumberofHolidaySchedulesSupported";
	final static String ATTR_MaxPINCodeLength_NAME = "MaxPINCodeLength";
	final static String ATTR_MinPINCodeLength_NAME = "MinPINCodeLength";
	final static String ATTR_MaxRFIDCodeLength_NAME = "MaxRFIDCodeLength";
	final static String ATTR_MinRFIDCodeLength_NAME = "MinRFIDCodeLength";
	final static String ATTR_EnableLogging_NAME = "EnableLogging";
	final static String ATTR_Language_NAME = "Language";
	final static String ATTR_LEDSettings_NAME = "LEDSettings";
	final static String ATTR_AutoRelockTime_NAME = "AutoRelockTime";
	final static String ATTR_SoundVolume_NAME = "SoundVolume";
	final static String ATTR_Operatingmode_NAME = "Operatingmode";
	final static String ATTR_SupportedOperatingModes_NAME = "SupportedOperatingModes";
	final static String ATTR_DefaultConfigurationRegister_NAME = "DefaultConfigurationRegister";
	final static String ATTR_EnableLocalProgramming_NAME = "EnableLocalProgramming";
	final static String ATTR_EnableOneTouchLocking_NAME = "EnableOneTouchLocking";
	final static String ATTR_EnableInsideStatusLED_NAME = "EnableInsideStatusLED";
	final static String ATTR_EnablePrivacyModeButton_NAME = "EnablePrivacyModeButton";
	final static String ATTR_Wrongcodeentrylimit_NAME = "Wrongcodeentrylimit";
	final static String ATTR_UserCodeTemporaryDisableTime_NAME = "UserCodeTemporaryDisableTime";
	final static String ATTR_SendPINovertheAir_NAME = "SendPINovertheAir";
	final static String ATTR_RequirePINforRFOperation_NAME = "RequirePINforRFOperation";
	final static String ATTR_ZigBeeSecurityLevel_NAME = "ZigBeeSecurityLevel";
	final static String ATTR_AlarmMask_NAME = "AlarmMask";
	final static String ATTR_KeypadOperationEventMask_NAME = "KeypadOperationEventMask";
	final static String ATTR_RFOperationEventMask_NAME = "RFOperationEventMask";
	final static String ATTR_ManualOperationEventMask_NAME = "ManualOperationEventMask";
	final static String ATTR_RFIDOperationEventMask_NAME = "RFIDOperationEventMask";
	final static String ATTR_KeypadProgrammingEventMask_NAME = "KeypadProgrammingEventMask";
	final static String ATTR_RFProgrammingEventMask_NAME = "RFProgrammingEventMask";
	final static String ATTR_RFIDProgrammingEventMask_NAME = "RFIDProgrammingEventMask";
	final static String CMD_LockDoor_NAME = "LockDoor";
	final static String CMD_UnlockDoor_NAME = "UnlockDoor";
	final static String CMD_Toggle_NAME = "Toggle";
	final static String CMD_UnlockWithTimeout_NAME = "UnlockWithTimeout";
	final static String CMD_GetLogRecord_NAME = "GetLogRecord";
	final static String CMD_SetPINCode_NAME = "SetPINCode";
	final static String CMD_GetPINCode_NAME = "GetPINCode";
	final static String CMD_ClearPINCode_NAME = "ClearPINCode";
	final static String CMD_ClearAllPINCodes_NAME = "ClearAllPINCodes";
	final static String CMD_SetUserStatus_NAME = "SetUserStatus";
	final static String CMD_GetUserStatus_NAME = "GetUserStatus";
	final static String CMD_SetWeekdaySchedule_NAME = "SetWeekdaySchedule";
	final static String CMD_GetWeekdaySchedule_NAME = "GetWeekdaySchedule";
	final static String CMD_ClearWeekdaySchedule_NAME = "ClearWeekdaySchedule";
	final static String CMD_SetYearDaySchedule_NAME = "SetYearDaySchedule";
	final static String CMD_GetYearDaySchedule_NAME = "GetYearDaySchedule";
	final static String CMD_ClearYearDaySchedule_NAME = "ClearYearDaySchedule";
	final static String CMD_SetHolidaySchedule_NAME = "SetHolidaySchedule";
	final static String CMD_GetHolidaySchedule_NAME = "GetHolidaySchedule";
	final static String CMD_ClearHolidaySchedule_NAME = "ClearHolidaySchedule";
	final static String CMD_SetUsertype_NAME = "SetUsertype";
	final static String CMD_GetUsertype_NAME = "GetUsertype";
	final static String CMD_SetRFIDCode_NAME = "SetRFIDCode";
	final static String CMD_GetRFIDCode_NAME = "GetRFIDCode";
	final static String CMD_ClearRFIDCode_NAME = "ClearRFIDCode";
	final static String CMD_ClearAllRFIDCodes_NAME = "ClearAllRFIDCodes";

	public short getLockState(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException;

	public short getLockType(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException;

	public boolean getActuatorEnabled(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException;

	public short getDoorState(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException;

	public long getDoorOpenEvents(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException;

	public long getDoorClosedEvents(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException;

	public int getOpenPeriod(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException;

	public int getNumberofLogRecordsSupported(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException;

	public int getNumberofTotalUsersSupported(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException;

	public int getNumberofPINUsersSupported(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException;

	public int getNumberofRFIDUsersSupported(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException;

	public short getNumberofWeekDaySchedulesSupportedPerUser(IEndPointRequestContext context) throws ApplianceException,
			ServiceClusterException;

	public short getNumberofYearDaySchedulesSupportedPerUser(IEndPointRequestContext context) throws ApplianceException,
			ServiceClusterException;

	public short getNumberofHolidaySchedulesSupported(IEndPointRequestContext context) throws ApplianceException,
			ServiceClusterException;

	public short getMaxPINCodeLength(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException;

	public short getMinPINCodeLength(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException;

	public short getMaxRFIDCodeLength(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException;

	public short getMinRFIDCodeLength(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException;

	public boolean getEnableLogging(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException;

	public String getLanguage(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException;

	public short getLEDSettings(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException;

	public long getAutoRelockTime(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException;

	public short getSoundVolume(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException;

	public short getOperatingmode(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException;

	public int getSupportedOperatingModes(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException;

	public int getDefaultConfigurationRegister(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException;

	public boolean getEnableLocalProgramming(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException;

	public boolean getEnableOneTouchLocking(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException;

	public boolean getEnableInsideStatusLED(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException;

	public boolean getEnablePrivacyModeButton(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException;

	public short getWrongcodeentrylimit(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException;

	public short getUserCodeTemporaryDisableTime(IEndPointRequestContext context) throws ApplianceException,
			ServiceClusterException;

	public boolean getSendPINovertheAir(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException;

	public boolean getRequirePINforRFOperation(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException;

	public short getZigBeeSecurityLevel(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException;

	public int getAlarmMask(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException;

	public int getKeypadOperationEventMask(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException;

	public int getRFOperationEventMask(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException;

	public int getManualOperationEventMask(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException;

	public int getRFIDOperationEventMask(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException;

	public int getKeypadProgrammingEventMask(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException;

	public int getRFProgrammingEventMask(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException;

	public int getRFIDProgrammingEventMask(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException;

	public LockDoorResponse execLockDoor(String PINRFIDCode, IEndPointRequestContext context) throws ApplianceException,
			ServiceClusterException;

	public UnlockDoorResponse execUnlockDoor(String PINRFIDCode, IEndPointRequestContext context) throws ApplianceException,
			ServiceClusterException;

	public ToggleResponse execToggle(String PINRFIDCode, IEndPointRequestContext context) throws ApplianceException,
			ServiceClusterException;

	public UnlockWithTimeoutResponse execUnlockWithTimeout(int TimeoutInSeconds, String PINRFIDCode, IEndPointRequestContext context)
			throws ApplianceException, ServiceClusterException;

	public GetLogRecordResponse execGetLogRecord(int LogIndex, IEndPointRequestContext context) throws ApplianceException,
			ServiceClusterException;

	public SetPINCodeResponse execSetPINCode(int UserID, short UserStatus, short UserType, String PIN,
			IEndPointRequestContext context) throws ApplianceException, ServiceClusterException;

	public GetPINCodeResponse execGetPINCode(int UserID, IEndPointRequestContext context) throws ApplianceException,
			ServiceClusterException;

	public ClearPINCodeResponse execClearPINCode(int UserID, IEndPointRequestContext context) throws ApplianceException,
			ServiceClusterException;

	public ClearAllPINCodesResponse execClearAllPINCodes(IEndPointRequestContext context) throws ApplianceException,
			ServiceClusterException;

	public SetUserStatusResponse execSetUserStatus(int UserID, short UserStatus, IEndPointRequestContext context)
			throws ApplianceException, ServiceClusterException;

	public GetUserStatusResponse execGetUserStatus(int UserID, IEndPointRequestContext context) throws ApplianceException,
			ServiceClusterException;

	public SetWeekdayScheduleResponse execSetWeekdaySchedule(short ScheduleID, int UserID, short DaysMask, short StartHour,
			short StartMinute, short EndHour, short EndMinute, IEndPointRequestContext context) throws ApplianceException,
			ServiceClusterException;

	public GetWeekdayScheduleResponse execGetWeekdaySchedule(short ScheduleID, int UserID, IEndPointRequestContext context)
			throws ApplianceException, ServiceClusterException;

	public ClearWeekdayScheduleResponse execClearWeekdaySchedule(short ScheduleID, int UserID, IEndPointRequestContext context)
			throws ApplianceException, ServiceClusterException;

	public SetYearDayScheduleResponse execSetYearDaySchedule(short ScheduleID, int UserID, long ZigBeeLocalStartTime,
			long ZigBeeLocalEndTime, IEndPointRequestContext context) throws ApplianceException, ServiceClusterException;

	public GetYearDayScheduleResponse execGetYearDaySchedule(short ScheduleID, int UserID, IEndPointRequestContext context)
			throws ApplianceException, ServiceClusterException;

	public ClearYearDayScheduleResponse execClearYearDaySchedule(short ScheduleID, int UserID, IEndPointRequestContext context)
			throws ApplianceException, ServiceClusterException;

	public SetHolidayScheduleResponse execSetHolidaySchedule(short HolidayScheduleID, long ZigBeeLocalStartTime,
			long ZigBeeLocalEndTime, short OperatingModeDuringHoliday, IEndPointRequestContext context) throws ApplianceException,
			ServiceClusterException;

	public GetHolidayScheduleResponse execGetHolidaySchedule(short HolidayScheduleID, IEndPointRequestContext context)
			throws ApplianceException, ServiceClusterException;

	public ClearHolidayScheduleResponse execClearHolidaySchedule(short HolidayScheduleID, IEndPointRequestContext context)
			throws ApplianceException, ServiceClusterException;

	public SetUsertypeResponse execSetUsertype(int UserID, short UserType, IEndPointRequestContext context)
			throws ApplianceException, ServiceClusterException;

	public GetUsertypeResponse execGetUsertype(int UserID, IEndPointRequestContext context) throws ApplianceException,
			ServiceClusterException;

	public SetRFIDCodeResponse execSetRFIDCode(int UserID, short UserStatus, short UserType, String RFIDCode,
			IEndPointRequestContext context) throws ApplianceException, ServiceClusterException;

	public GetRFIDCodeResponse execGetRFIDCode(int UserID, IEndPointRequestContext context) throws ApplianceException,
			ServiceClusterException;

	public ClearRFIDCodeResponse execClearRFIDCode(int UserID, IEndPointRequestContext context) throws ApplianceException,
			ServiceClusterException;

	public ClearAllRFIDCodesResponse execClearAllRFIDCodes(IEndPointRequestContext context) throws ApplianceException,
			ServiceClusterException;

}
