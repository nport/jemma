package org.energy_home.jemma.ah.zigbee.zcl.cluster.wulian;

import java.util.Collection;
import java.util.Map;

import org.energy_home.jemma.ah.cluster.zigbee.wulian.WeightMeterServer;
import org.energy_home.jemma.ah.hac.ApplianceException;
import org.energy_home.jemma.ah.hac.IEndPointRequestContext;
import org.energy_home.jemma.ah.hac.ServiceClusterException;
import org.energy_home.jemma.ah.internal.zigbee.ZclAttributeDescriptor;
import org.energy_home.jemma.ah.zigbee.IZclFrame;
import org.energy_home.jemma.ah.zigbee.ZigBeeDeviceListener;
import org.energy_home.jemma.ah.zigbee.zcl.IZclAttributeDescriptor;
import org.energy_home.jemma.ah.zigbee.zcl.lib.ZclServiceCluster;
import org.energy_home.jemma.ah.zigbee.zcl.lib.types.ZclDataTypeUI16;

/**
 * This file is part of JEMMA - http://jemma.energy-home.org (C) Copyright 2014
 * Telecom Italia (http://www.telecomitalia.it)
 * 
 * JEMMA is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License (LGPL) version 3 or later as
 * published by the Free Software Foundation, which accompanies this
 * distribution and is available at http://www.gnu.org/licenses/lgpl.html
 * 
 * JEMMA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License (LGPL) for
 * more details.
 * 
 * This class has been generated by the Jemma ZigBee Cluster Library generator,
 * version 2.0.13-SNAPSHOT
 * 
 */
public class ZclWeightMeterServer extends ZclServiceCluster implements WeightMeterServer, ZigBeeDeviceListener {

	public final static short CLUSTER_ID = (short) 64517;
	static Map attributesMapByName = null;
	static Map attributesMapById = null;
	static ZclAttributeDescriptor[] attributeDescriptors = null;

	static {
		attributeDescriptors = new ZclAttributeDescriptor[1];
		attributeDescriptors[0] = new ZclAttributeDescriptor(0, ZclWeightMeterServer.ATTR_Weight_NAME, new ZclDataTypeUI16(), null,
				true, 1);
		attributesMapByName = fillAttributesMapsByName(attributeDescriptors, attributesMapByName);
		attributesMapById = fillAttributesMapsById(attributeDescriptors, attributesMapById);
	}

	public ZclWeightMeterServer() throws ApplianceException {
		super();
	}

	protected int getClusterId() {
		return CLUSTER_ID;
	}

	protected IZclAttributeDescriptor getAttributeDescriptor(String name) {
		return (IZclAttributeDescriptor) attributesMapByName.get(name);
	}

	protected IZclAttributeDescriptor getAttributeDescriptor(int attrId) {
		return (IZclAttributeDescriptor) attributesMapById.get(attrId);
	}

	protected Collection getAttributeDescriptors() {
		return attributesMapByName.values();
	}

	public int getWeight(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		if (context != null) {
			Integer objectResult = null;
			objectResult = (Integer) getValidCachedAttributeObject(0, context.getMaxAgeForAttributeValues());
			if (objectResult != null) {
				return objectResult.intValue();
			}
		}
		IZclFrame zclFrame = readAttribute(0, context);
		int v = ZclDataTypeUI16.zclParse(zclFrame);
		setCachedAttributeObject(0, new Integer(v));
		return v;
	}

}
