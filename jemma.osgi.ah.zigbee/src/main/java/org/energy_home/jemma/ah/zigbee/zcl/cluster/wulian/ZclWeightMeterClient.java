package org.energy_home.jemma.ah.zigbee.zcl.cluster.wulian;

import org.energy_home.jemma.ah.cluster.zigbee.wulian.WeightMeterClient;
import org.energy_home.jemma.ah.cluster.zigbee.wulian.WeightMeterServer;
import org.energy_home.jemma.ah.hac.ApplianceException;
import org.energy_home.jemma.ah.hac.ServiceClusterException;
import org.energy_home.jemma.ah.hac.UnsupportedClusterAttributeException;
import org.energy_home.jemma.ah.zigbee.IZclFrame;
import org.energy_home.jemma.ah.zigbee.ZCL;
import org.energy_home.jemma.ah.zigbee.ZigBeeDeviceListener;
import org.energy_home.jemma.ah.zigbee.zcl.IZclAttributeDescriptor;
import org.energy_home.jemma.ah.zigbee.zcl.ZclValidationException;
import org.energy_home.jemma.ah.zigbee.zcl.lib.ZclServiceCluster;
import org.energy_home.jemma.ah.zigbee.zcl.lib.types.ZclDataTypeUI16;
import org.energy_home.jemma.ah.zigbee.zcl.lib.types.ZclDataTypeUI8;

/**
 * This file is part of JEMMA - http://jemma.energy-home.org (C) Copyright 2014
 * Telecom Italia (http://www.telecomitalia.it)
 * 
 * JEMMA is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License (LGPL) version 3 or later as
 * published by the Free Software Foundation, which accompanies this
 * distribution and is available at http://www.gnu.org/licenses/lgpl.html
 * 
 * JEMMA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License (LGPL) for
 * more details.
 * 
 * This class has been generated by the Jemma ZigBee Cluster Library generator,
 * version 2.0.13-SNAPSHOT
 * 
 */
public class ZclWeightMeterClient extends ZclServiceCluster implements WeightMeterClient, ZigBeeDeviceListener {

	public final static short CLUSTER_ID = (short) 64517;

	public ZclWeightMeterClient() throws ApplianceException {
		super();
	}

	protected int getClusterId() {
		return CLUSTER_ID;
	}

	protected IZclAttributeDescriptor[] getPeerClusterAttributeDescriptors() {
		return ZclWeightMeterServer.attributeDescriptors;
	}

	protected int readAttributeResponseGetSize(int attrId) throws ServiceClusterException, ZclValidationException {
		switch (attrId) {
		case 0:
			return ZclDataTypeUI16.zclSize(0);
		default:
			throw new UnsupportedClusterAttributeException();
		}
	}

	protected boolean fillAttributeRecord(IZclFrame zclResponseFrame, int attrId) throws ApplianceException,
			ServiceClusterException {
		WeightMeterServer c = (WeightMeterServer) getSinglePeerCluster(WeightMeterServer.class.getName());
		switch (attrId) {
		case 0: {
			int v;
			v = c.getWeight(endPoint.getDefaultRequestContext());
			ZclDataTypeUI8.zclSerialize(zclResponseFrame, ZCL.SUCCESS);
			zclResponseFrame.appendUInt8(ZclDataTypeUI16.ZCL_DATA_TYPE);
			ZclDataTypeUI16.zclSerialize(zclResponseFrame, v);
			break;
		}
		default:
			return false;
		}
		return true;
	}

	protected short writeAttribute(IZclFrame zclFrame, int attrId, short dataType) throws Exception {
		switch (attrId) {
		case 0:
			return ZCL.READ_ONLY;
		default:
			return ZCL.UNSUPPORTED_ATTRIBUTE;
		}
	}

}
